{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "pink",
    "glyph" : "mobile-alt"
  },
  "name" : "ChinaMobile",
  "script" : "\n\/\/ 添加require，是为了vscode中可以正确引入包，以获得自动补全等功能\nif (typeof require === 'undefined') require = importModule;\nconst {DmYY, Runing} = require('.\/DmYY');\nconst CryptoJS = require('.\/crypto-js');\n\n\/\/ @组件代码开始\nclass Widget extends DmYY {\n  constructor(arg) {\n    super(arg);\n    this.name = '中国移动';\n    this.en = 'ChinaMobile';\n    this.Run();\n  }\n\n  getfee = {};\n  autologin = {};\n  cookie = '';\n\n  fgCircleColor = Color.dynamic(new Color('#dddef3'), new Color('#fff'));\n  percentColor = this.widgetColor;\n  textColor1 = Color.dynamic(new Color('#333'), new Color('#fff'));\n  textColor2 = this.widgetColor;\n\n  circleColor1 = new Color('#ffbb73');\n  circleColor2 = new Color('#ff0029');\n  circleColor3 = new Color('#00b800');\n  circleColor4 = new Color('#8376f9');\n  iconColor = new Color('#827af1');\n\n  format = (str) => {\n    return parseInt(str) >= 10 ? str : `0${str}`;\n  };\n\n  date = new Date();\n  arrUpdateTime = [\n    this.format(this.date.getMonth() + 1),\n    this.format(this.date.getDate()),\n    this.format(this.date.getHours()),\n    this.format(this.date.getMinutes()),\n  ];\n\n  \/\/ percent 的计算方式，剩余\/总量 * 100 = 百分比| 百分比 * 3.6 ，为显示进度。\n  phoneBill = {\n    percent: 0,\n    label: '话费剩余',\n    count: 0,\n    unit: '元',\n    icon: 'yensign.circle',\n    circleColor: this.circleColor1,\n  };\n\n  flow = {\n    percent: 0,\n    label: '流量剩余',\n    count: 0,\n    unit: 'M',\n    icon: 'waveform.path.badge.minus',\n    circleColor: this.circleColor2,\n  };\n\n  voice = {\n    percent: 0,\n    label: '语音剩余',\n    count: 0,\n    unit: '分钟',\n    icon: 'mic',\n    circleColor: this.circleColor3,\n  };\n\n  updateTime = {\n    percent: 0,\n    label: '更新时间',\n    count: `${this.arrUpdateTime[2]}:${this.arrUpdateTime[3]}`,\n    unit: '',\n    icon: 'clock',\n    circleColor: this.circleColor4,\n  };\n\n  canvSize = 100;\n  canvWidth = 5; \/\/ circle thickness\n  canvRadius = 100; \/\/ circle radius\n  dayRadiusOffset = 60;\n  canvTextSize = 40;\n\n  init = async () => {\n    try {\n      const nowHours = this.date.getHours();\n      const updateHours = nowHours > 12 ? 24 : 12;\n      this.updateTime.percent = Math.floor(nowHours \/ updateHours * 100);\n      await this.login();\n      await this.queryFee();\n      await this.queryFlow();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  async login() {\n    try {\n      const options = this.autologin;\n      const request = new Request(options.url);\n      Object.keys(options).forEach(key => {\n        request[key] = options[key];\n      });\n      request.method = 'POST';\n      await request.loadString();\n      this.cookie = request.response.headers['Set-Cookie'];\n      if (this.cookie) {\n        console.log('✅登陆成功');\n      } else {\n        console.log('❌登陆失败');\n      }\n    } catch (e) {\n      console.log('❌登陆失败，请检查 Ck：' + e);\n    }\n  }\n\n  async queryFee() {\n    try {\n      const options = this.getfee;\n      const body = JSON.parse(this.decrypt(options.body, 'bAIgvwAuA4tbDr9d'));\n      const cellNum = body.reqBody.cellNum;\n      const bodystr = `{\"t\":\"${CryptoJS.MD5(this.cookie).\n          toString()}\",\"cv\":\"9.9.9\",\"reqBody\":{\"cellNum\":\"${cellNum}\"}}`;\n      options.body = this.encrypt(bodystr, 'bAIgvwAuA4tbDr9d');\n      options.headers['Cookie'] = this.cookie;\n      options.headers['xs'] = CryptoJS.MD5(\n          options.url + '_' + bodystr + '_Leadeon\/SecurityOrganization',\n      ).toString();\n      const response = await this.$request.post(options.url, options, 'STRING');\n      const data = JSON.parse(this.decrypt(response, 'GS7VelkJl5IT1uwQ'));\n      if (data.retCode === '000000') {\n        console.log('✅费用信息获取成功');\n        const {rspBody} = data;\n        this.phoneBill.count = rspBody.curFee;\n      } else {\n        console.log('❌费用信息获取失败，请检查 Ck 配置' + data.retDesc);\n      }\n    } catch (e) {\n      console.log('❌费用信息获取失败：' + e);\n    }\n  }\n\n  async queryFlow() {\n    try {\n      const options = this.getfee;\n      const body = JSON.parse(this.decrypt(options.body, 'bAIgvwAuA4tbDr9d'));\n      const cellNum = body.reqBody.cellNum;\n      options.url =\n          'https:\/\/clientaccess.10086.cn\/biz-orange\/BN\/newComboMealResouceUnite\/getNewComboMealResource';\n      const bodystr = `{\"t\":\"${CryptoJS.MD5(this.cookie).\n          toString()}\",\"cv\":\"9.9.9\",\"reqBody\":{\"cellNum\":\"${cellNum}\",\"tag\":\"3\"}}`;\n      options.body = this.encrypt(bodystr, 'bAIgvwAuA4tbDr9d');\n      options.headers['Cookie'] = this.cookie;\n      options.headers['xs'] = CryptoJS.MD5(\n          options.url + '_' + bodystr + '_Leadeon\/SecurityOrganization').\n          toString();\n\n      const response = await this.$request.post(options.url, options, 'STRING');\n      const data = JSON.parse(this.decrypt(response, 'GS7VelkJl5IT1uwQ'));\n      if (data.retCode === '000000') {\n        console.log('✅套餐信息获取成功');\n        const res = data.rspBody.qryInfoRsp[0].resourcesTotal;\n        const flowRes = res.find((r) => r.resourcesCode === '04');\n        const voiceRes = res.find((r) => r.resourcesCode === '01');\n        var flowResValue = '未开通', voiceResValue = '';\n        if (flowRes) {\n          const total = this.translateFlow(\n              {value: flowRes.allTotalRes, code: flowRes.allUnit});\n          const remain = this.translateFlow(\n              {value: flowRes.allRemainRes, code: flowRes.remUnit});\n          this.flow.percent = Math.floor(\n              (remain.value \/ (total.value || 1)) * 100);\n          this.flow.count = flowRes.allRemainRes;\n          this.flow.unit = remain.unit;\n          flowResValue = `${flowRes.allRemainRes}${remain.unit}`;\n        }\n        if (voiceRes) {\n          this.voice.percent = Math.floor(\n              voiceRes.allRemainRes \/ (voiceRes.allTotalRes || 1) * 100);\n          this.voice.count = voiceRes.allRemainRes;\n          voiceResValue = voiceRes.allRemainRes;\n        }\n        console.log(\n            `✅流量：` + flowResValue + '\\n ✅语音：' + voiceResValue);\n      } else {\n        console.log('❌流量信息获取失败，请检查 Ck 配置' + data.retDesc);\n      }\n    } catch (e) {\n      console.log('❌流量信息获取失败：' + e);\n    }\n  }\n\n  encrypt(str, key) {\n    return CryptoJS.AES.encrypt(\n        CryptoJS.enc.Utf8.parse(str),\n        CryptoJS.enc.Utf8.parse(key),\n        {\n          iv: CryptoJS.enc.Utf8.parse('9791027341711819'),\n          mode: CryptoJS.mode.CBC,\n          padding: CryptoJS.pad.Pkcs7,\n        },\n    ).toString();\n  }\n\n  decrypt(str, key) {\n    return CryptoJS.AES.decrypt(str, CryptoJS.enc.Utf8.parse(key), {\n      iv: CryptoJS.enc.Utf8.parse('9791027341711819'),\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7,\n    }).toString(CryptoJS.enc.Utf8);\n  }\n\n  translateFlow(value) {\n    const unit = [\n      {unit: 'G', value: 1024, code: '05'},\n      {unit: 'M', value: 1, code: '04'},\n    ];\n    const data = {unit: '', ...value};\n    unit.forEach(item => {\n      if (value.code === item.code) {\n        data.unit = item.unit;\n        data.value = Math.floor((parseFloat(data.value) * item.value) * 100) \/\n            100;\n      }\n    });\n    return data;\n  }\n\n  makeCanvas() {\n    const canvas = new DrawContext();\n    canvas.opaque = false;\n    canvas.respectScreenScale = true;\n    canvas.size = new Size(this.canvSize, this.canvSize);\n    return canvas;\n  }\n\n  makeCircle(canvas, radiusOffset, degree, color) {\n    let ctr = new Point(this.canvSize \/ 2, this.canvSize \/ 2);\n    \/\/ Outer circle\n    const bgx = ctr.x - (this.canvRadius - radiusOffset);\n    const bgy = ctr.y - (this.canvRadius - radiusOffset);\n    const bgd = 2 * (this.canvRadius - radiusOffset);\n    const bgr = new Rect(\n        bgx,\n        bgy,\n        bgd,\n        bgd,\n    );\n    canvas.setStrokeColor(this.fgCircleColor);\n    canvas.setLineWidth(2);\n    canvas.strokeEllipse(bgr);\n    \/\/ Inner circle\n    canvas.setFillColor(color);\n    for (let t = 0; t < degree; t++) {\n      const rect_x = ctr.x + (this.canvRadius - radiusOffset) * this.sinDeg(t) -\n          this.canvWidth \/ 2;\n      const rect_y = ctr.y - (this.canvRadius - radiusOffset) * this.cosDeg(t) -\n          this.canvWidth \/ 2;\n      const rect_r = new Rect(\n          rect_x,\n          rect_y,\n          this.canvWidth,\n          this.canvWidth,\n      );\n      canvas.fillEllipse(rect_r);\n    }\n  }\n\n  drawText(txt, canvas, txtOffset, fontSize) {\n    const txtRect = new Rect(\n        this.canvTextSize \/ 2 - 20,\n        txtOffset - this.canvTextSize \/ 2,\n        this.canvSize,\n        this.canvTextSize,\n    );\n    canvas.setTextColor(this.percentColor);\n    canvas.setFont(Font.boldSystemFont(fontSize));\n    canvas.setTextAlignedCenter();\n    canvas.drawTextInRect(`${txt}`, txtRect);\n  }\n\n  drawPointText(txt, canvas, txtPoint, fontSize) {\n    canvas.setTextColor(this.percentColor);\n    canvas.setFont(Font.boldSystemFont(fontSize));\n    canvas.drawText(txt, txtPoint);\n  }\n\n  sinDeg(deg) {\n    return Math.sin((deg * Math.PI) \/ 180);\n  }\n\n  cosDeg(deg) {\n    return Math.cos((deg * Math.PI) \/ 180);\n  }\n\n  setCircleText = (stack, data) => {\n    const stackCircle = stack.addStack();\n    const canvas = this.makeCanvas();\n    stackCircle.size = new Size(70, 70);\n    this.makeCircle(\n        canvas, this.dayRadiusOffset, data.percent * 3.6, data.circleColor);\n\n    this.drawText(data.percent, canvas, 75, 18);\n    this.drawPointText(`%`, canvas, new Point(65, 50), 14);\n    stackCircle.backgroundImage = canvas.getImage();\n\n    stackCircle.setPadding(20, 0, 0, 0);\n    stackCircle.addSpacer();\n    const icon = SFSymbol.named(data.icon);\n    const imageIcon = stackCircle.addImage(icon.image);\n    imageIcon.tintColor = this.iconColor;\n    imageIcon.imageSize = new Size(15, 15);\n    \/\/ canvas.drawImageInRect(icon.image, new Rect(110, 80, 60, 60));\n    stackCircle.addSpacer();\n\n    stack.addSpacer(5);\n    const stackDesc = stack.addStack();\n    stackDesc.size = new Size(70, 60);\n    stackDesc.centerAlignContent();\n    stackDesc.layoutVertically();\n    stackDesc.addSpacer(10);\n    const textLabel = this.textFormat.defaultText;\n    textLabel.size = 12;\n    textLabel.color = this.textColor2;\n    this.provideText(data.label, stackDesc, textLabel);\n    stackDesc.addSpacer(10);\n\n    const stackDescFooter = stackDesc.addStack();\n    stackDescFooter.centerAlignContent();\n    const textCount = this.textFormat.title;\n    textCount.size = 16;\n    textCount.color = this.textColor1;\n    this.provideText(`${data.count}`, stackDescFooter, textCount);\n    stackDescFooter.addSpacer(2);\n    this.provideText(data.unit, stackDescFooter, textLabel);\n  };\n\n  renderSmall = async (w) => {\n    w.setPadding(5, 5, 5, 5);\n    const stackBody = w.addStack();\n    stackBody.layoutVertically();\n    const stackTop = stackBody.addStack();\n    this.setCircleText(stackTop, this.phoneBill);\n    const stackBottom = stackBody.addStack();\n    this.setCircleText(stackBottom, this.flow);\n\n    const stackFooter = stackBody.addStack();\n    stackFooter.addSpacer();\n    const text = this.textFormat.defaultText;\n    text.color = new Color('#aaa');\n    this.provideText(\n        `更新时间：${this.arrUpdateTime[2]}:${this.arrUpdateTime[3]}`,\n        stackFooter,\n        text,\n    );\n    stackFooter.addSpacer();\n    return w;\n  };\n\n  renderMedium = async (w) => {\n    const stackBody = w.addStack();\n    stackBody.layoutVertically();\n    const stackTop = stackBody.addStack();\n    this.setCircleText(stackTop, this.phoneBill);\n    this.setCircleText(stackTop, this.flow);\n    const stackBottom = stackBody.addStack();\n    this.setCircleText(stackBottom, this.voice);\n    this.setCircleText(stackBottom, this.updateTime);\n    return w;\n  };\n\n  renderLarge = async (w) => {\n    return await this.renderMedium(w);\n  };\n\n  Run() {\n    if (config.runsInApp) {\n      const widgetInitConfig = {\n        getfee: 'chavy_getfee_cmcc',\n        autologin: 'chavy_autologin_cmcc',\n      };\n      this.registerAction('颜色配置', async () => {\n        await this.setAlertInput(\n            `${this.name}颜色配置`, '进度条颜色|底圈颜色\\n图标颜色|比值颜色|值颜色', {\n              step1: '进度颜色 1',\n              step2: '进度颜色 2',\n              step3: '进度颜色 3',\n              step4: '进度颜色 4',\n              inner: '底圈颜色',\n              icon: '图标颜色',\n              percent: '比值颜色',\n              value: '值颜色',\n            });\n      });\n      this.registerAction('账号设置', async () => {\n        await this.setAlertInput(\n            `${this.name}账号`, '读取 BoxJS 缓存信息', widgetInitConfig);\n      });\n      this.registerAction('代理缓存', async () => {\n        await this.setCacheBoxJSData(widgetInitConfig);\n      });\n      this.registerAction('基础设置', this.setWidgetConfig);\n    }\n    const {getfee, autologin, step1, step2, step3, step4, inner, icon, percent, value} = this.settings;\n    this.fgCircleColor = inner ? new Color(inner) : this.fgCircleColor;\n    this.textColor1 = value ? new Color(value) : this.textColor1;\n    this.circleColor1 = step1 ? new Color(step1) : this.circleColor1;\n    this.circleColor2 = step2 ? new Color(step2) : this.circleColor2;\n    this.circleColor3 = step3 ? new Color(step3) : this.circleColor3;\n    this.circleColor4 = step4 ? new Color(step4) : this.circleColor4;\n    this.iconColor = icon ? new Color(icon) : this.iconColor;\n    this.percentColor = percent ? new Color(percent) : this.percentColor;\n\n    this.getfee = JSON.parse(getfee || '{}');\n    this.autologin = JSON.parse(autologin || '{}');\n  }\n\n  \/**\n   * 渲染函数，函数名固定\n   * 可以根据 this.widgetFamily 来判断小组件尺寸，以返回不同大小的内容\n   *\/\n  async render() {\n    await this.init();\n    const widget = new ListWidget();\n    widget.setPadding(0, 0, 0, 0);\n    await this.getWidgetBackgroundImage(widget);\n    if (this.widgetFamily === 'medium') {\n      return await this.renderMedium(widget);\n    } else if (this.widgetFamily === 'large') {\n      return await this.renderLarge(widget);\n    } else {\n      return await this.renderSmall(widget);\n    }\n  }\n}\n\n\/\/ @组件代码结束\n\/\/ await Runing(Widget, \"\", false); \/\/ 正式环境\nawait Runing(Widget, args.widgetParameter, false); \/\/远程开发环境\n",
  "share_sheet_inputs" : [

  ]
}